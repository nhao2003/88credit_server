// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN @map("admin")
  USER  @map("user")
}

enum AccountStatus {
  UNVERIFIED  @map("unverified")
  NOT_UPDATED @map("notUpdated")
  BANNED      @map("banned")
  DELETED     @map("deleted")
  VERIFIED    @map("verified")
}

model User {
  id                   String         @id @default(uuid())
  role                 Role           @default(USER)
  status               AccountStatus  @default(UNVERIFIED)
  isIdentityVerified   Boolean        @default(false)
  email                String         @unique
  password             String
  firstName            String
  avatar               String
  address              Json           @default("{}")
  lastName             String
  gender               Boolean
  dob                  DateTime
  phone                String
  banReason            String?
  banUntil             DateTime?
  lastActiveAt         DateTime       @default(now())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  sessions             Session[]
  Otp                  Otp[]
  Post                 Post[]
  LoanRequestReceived  LoanRequest[]  @relation("LoanRequestReceiver")
  LoanRequestSent      LoanRequest[]  @relation("LoanRequestSender")
  BankCard             BankCard[]
  LoanContractBorrower LoanContract[] @relation("LoanContractBorrower")
  LoanContractLender   LoanContract[] @relation("LoanContractLender")

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshAt DateTime @default(now())
  timestamp DateTime @default(now())

  @@map("sessions")
}

enum OtpType {
  EMAIL
  PHONE
}

enum OtpPurpose {
  PASSWORD_RESET     @map("passwordReset")
  EMAIL_VERIFICATION @map("emailVerification")
  PHONE_VERIFICATION @map("phoneVerification")
  TWO_FACTOR_AUTH    @map("twoFactorAuth")
}

model Otp {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       OtpType
  purpose    OtpPurpose
  token      String
  verifiedAt DateTime?
  expiresAt  DateTime
  createdAt  DateTime   @default(now())

  @@map("otps")
}

enum PostStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
  HIDDEN   @map("hidden")

  @@map("post_status")
}

enum LoanReasonTypes {
  BUSINESS     @map("business")
  EDUCATION    @map("education")
  TRAVEL       @map("travel")
  WEDDING      @map("wedding")
  MEDICAL      @map("medical")
  SHOPPING     @map("shopping")
  HOUSE_BUYING @map("houseBuying")
  CAR_BUYING   @map("carBuying")
  OTHER        @map("other")

  @@map("loan_reason_types")
}

model Post {
  id                     String          @id @default(uuid())
  userId                 String
  status                 PostStatus      @default(PENDING)
  loanReason             LoanReasonTypes
  loanReasonDescription  String
  isLease                Boolean
  title                  String
  description            String
  images                 String[]
  interestRate           Float
  amount                 Float
  duration               Int
  overdueInterestRate    Float
  maxInterestRate        Float?
  maxAmount              Float?
  maxDuration            Int?
  maxOverdueInterestRate Float?
  rejectionReason        String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

enum LoanContractRequestStatus {
  pending   @map("pending")
  approved  @map("approved")
  rejected  @map("rejected")
  cancelled @map("cancelled")
}

enum LoanRequestStatus {
  PENDING             @map("pending")
  APPROVED            @map("approved")
  REJECTED            @map("rejected")
  CANCELLED           @map("cancelled")
  WAITING_FOR_PAYMENT @map("waitingForPayment")
  PAID                @map("paid")
}

model LoanRequest {
  id                   String            @id @default(uuid())
  status               LoanRequestStatus @default(PENDING)
  senderId             String
  receiverId           String
  description          String
  loanAmount           Float
  interestRate         Float
  overdueInterestRate  Float
  loanTenureMonths     Int
  loanReasonType       LoanReasonTypes
  loanReason           String
  videoConfirmationUrl String
  portaitPhotoUrl      String
  idCardFrontPhotoUrl  String
  idCardBackPhotoUrl   String
  senderBankCardId     String
  receiverBankCardId   String?
  rejectedReason       String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  deletedAt            DateTime?
  sender               User              @relation("LoanRequestSender", fields: [senderId], references: [id])
  receiver             User              @relation("LoanRequestReceiver", fields: [receiverId], references: [id])
  senderBankCard       BankCard          @relation("SenderBankCard", fields: [senderBankCardId], references: [id])
  receiverBankCard     BankCard?         @relation("ReceiverBankCard", fields: [receiverBankCardId], references: [id])
  LoanContract         LoanContract[]

  @@map("loan_requests")
}

model Bank {
  id        String     @id @default(uuid())
  name      String
  code      String     @unique
  bin       String
  shortName String
  logo      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  accounts  BankCard[]

  @@map("banks")
}

model BankCard {
  id         String    @id @default(uuid())
  isPrimary  Boolean
  bankId     String
  userId     String
  cardNumber String    @unique
  branch     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  user                User           @relation(fields: [userId], references: [id])
  bank                Bank           @relation(fields: [bankId], references: [id])
  LoanRequestSent     LoanRequest[]  @relation("SenderBankCard")
  LoanRequestReceived LoanRequest[]  @relation("ReceiverBankCard")
  LoanContractBorrower LoanContract[] @relation("BorrowerBankCard")
  LoanContractLender   LoanContract[] @relation("LenderBankCard")



  @@map("bank_cards")
}

model Blog {
  id               String   @id @default(uuid())
  title            String
  shortDescription String
  author           String
  content          String
  thumbnail        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("blogs")
}

model LoanContract {
  id                    String          @id @default(uuid())
  loanContractRequestId String
  lenderId              String
  lenderBankCardId      String
  borrowerId            String
  borrowerBankCardId    String
  loanReasonType        LoanReasonTypes
  loanReason            String
  amount                Float
  interestRate          Float
  tenureInMonths        Int
  overdueInterestRate   Float
  createdAt             DateTime        @default(now())
  expiredAt             DateTime        @default(dbgenerated("now() + interval '1 day'"))

  loanContractRequest LoanRequest @relation(fields: [loanContractRequestId], references: [id])
  lenderBankCard      BankCard   @relation("LenderBankCard", fields: [lenderBankCardId], references: [id])
  borrowerBankCard    BankCard   @relation("BorrowerBankCard", fields: [borrowerBankCardId], references: [id])
  lender              User        @relation("LoanContractLender", fields: [lenderId], references: [id])
  borrower            User        @relation("LoanContractBorrower", fields: [borrowerId], references: [id])

  @@map("loan_contracts")
}
